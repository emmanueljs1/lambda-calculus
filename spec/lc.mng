\documentclass{article}

\usepackage{amsmath,amssymb,amsthm}
\usepackage{ottalt}
\usepackage{mathpartir}
\usepackage{supertabular}
\usepackage{url}

\usepackage[dvipsnames]{xcolor}
\usepackage{color}

\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]
\newtheorem{lemma}{Lemma}[section]

\inputott{lc-rules}

\title{The untyped lambda calculus}
\author{CIS 6700, Spring 2023}

\begin{document}
\maketitle

\section{Untyped lambda calculus}

This document describes the untyped lambda-calculus, with the following grammar. References are to definitions in Barendregt, ``The Lambda Calculus: Its Syntax and Semantics''.

\ottgrammartabular{
\otttm
\ottafterlastrule
}


In $\beta$-reduction, the argument of an application is substituted for the bound variable in an abstraction. We use the $[[t [x ~> u] ]]$ notation for substituting the term $[[u]]$ for the variable $[[x]]$ in the term $[[t]]$.

\ottdefnsJBeta

We can define a deterministic, small-step evaluation relation by reducing
in the heads of applications. This is a \emph{call-by-name} semantics and performs head-reduction.

\ottdefnsJOp

We can also define a nondeterministic single-step full-reduction by performing
$\beta$-reduction in any subterm. Iterating this reduction will convert a term
into its $\beta$-normal form.

\ottdefnsJRed

We can define when two terms are equivalent up to $\beta$. 

\ottdefnsJEq

Finally, the Church-Rosser Theorem relies on the definition of parallel reduction. This is a version of reduction that is confluent.

\ottdefnsJPar


\section{Relation operations}

Many of the operations above can be generated by applying the following closure operations to the $\beta$ reduction relation.
These operations are parameterized by an arbitrary relation $R$. 

Note that $[[R |- t -> u]]$ with $[[R]]$ equal to $\beta$ is the same relation
as $[[t --> u]]$.  And, the compatible, reflexive, symmetic and transitive
closure of $\beta$ is the same relation as $[[t â‰¡ u]]$.

\ottdefnsJGen
\ottdefnsJRC
\ottdefnsJTC
\ottdefnsJRTC
\ottdefnsJSTC


\section{Eta-reduction}

By changing the definition of the underlying primitive reduction, we can also
reason about $\eta$-reduction and $\beta\eta$-equivalence.  Note that the rule for $\eta$-reduction has been stated in a way that generates the approporiate output for the locally-nameless representation in Coq. In this output, the fact that $[[x notin fv t]]$ is implicit and does not need to be added as a precondition to the rule.

\ottdefnsJEta
\ottdefnsJBetaEta



\end{document}
